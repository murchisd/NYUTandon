"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"



class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    #No global lock because openfile should throw FileInUseError if already open and we cant change removefile where this would be useful

    # local (per object) reference to the underlying file
    #Use per object lock so 2 threads cannot perform ops at same time
    self.lock = createlock()
	  
    #**Professor clarified "_" is fine since it is ok in the repy API
    #Letting repy openfile handle file name errors
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    self.start='' # Used to track B file; start as invalid
    self.end='' #**TA clarified do not need to worry about file manipulation outside of ABfile class
    self.len=0
    self.lock.acquire(True)
    try:   
      
      #Check if B file exists - 2 Cases exit on both
      #1) ABfile already open with same file name, since b removed at close()
      #2) .b file created independent of ABFile class, dont want to overwrite 
      if self.Bfn in listfiles():
        #log("B file exists\n") 
        raise Exception("B file Exists")
        #return 

      #Check for A file
      if self.Afn in listfiles():       
        self.Afile = openfile(self.Afn,False)
      #Copy A file into new b file
        self.Bfile = openfile(self.Bfn,True)
        adata=self.Afile.readat(None,0)
        self.len=len(adata)
        #A should always be valid if exists
        self.start='S'
        self.end='E'
        self.Bfile.writeat(adata,0) 
      else:
        # make the files and add 'SE' to the readat file...
        if create:
          self.Afile = openfile(self.Afn,create)
          self.Bfile = openfile(self.Bfn,create)
          self.Afile.writeat('SE',0)
        else:
          #log("Does not exist and no create flag")
          self.lock.release()
          raise Exception("Does not exist and no create flag")
    except Exception as e:
      self.lock.release()
      # Professor confirmed fine to raise exception here so no ABFile object not created
      raise Exception(e)
    #To-do - look in to using finally:
    self.lock.release()

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    # writeat should handle edge cases (negative offset, offset past file length,etc)
    #******* Aquire Lock********
    #log("Write: Aquiring Lock\n")
    self.lock.acquire(True)
    #Stops self.len from updating if exception thrown 
    tmplen=self.len
    try:
      if offset==0:
        self.start=data[0]
      if offset+len(data) > self.len-1:
        tmplen = offset+len(data)
        self.end=data[-1]
      self.Bfile.writeat(data,offset)
    except Exception as e:
      #self.lock.release()
      tmplen=self.len
      pass
      #raise e

    self.len=tmplen
    self.lock.release()

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    # readat should handle edge cases so dont need to check
    #********** Aquire Lock **********
    self.lock.acquire(True)
    try:
      data=self.Afile.readat(bytes,offset)
      return data
    except Exception as e:
      return ''
    finally:
      self.lock.release()

  def testLock(self):
    #Test if self.lock is thread safe
    #Lock does block other threads from writing, dont need global context
    log("Here")
    self.lock.acquire(True)
    sleep(5)
    self.lock.release()
    log("Released")
  


  def close(self):
    #****** Acquire Lock *******
    #Should stop TOCTOU
    self.lock.acquire(True)
    try:
      if self.start=='S' and self.end=='E':  
        # valid B file length can never be less than Afile so dont need to remove A       
        self.Afile.writeat(self.Bfile.readat(None,0),0)
      self.Bfile.close()
      removefile(self.Bfn) 
      self.Afile.close()
    except Exception as e:
      pass
    finally:
      self.lock.release()

def ABopenfile(filename, create):
  return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
                #"testLock":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.testLock}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
